print(x)
print(x);
> print(x);
x <- "Hello Wolrd";
print(x);
x
x, y, z;
x; y; z;
y = "Hellow Y";
"Hello Z" -> z;
x; y; z;
print(x,y,z);
d;
d <- as.Date(2001 - 02 - 03);
c <- "ABC";
c;
f <- function(x) { x + 1 };
f(2)
v <- c(1, 2, 3);
v
s <- 1:5;
s;
m <- matrix(data = 1:6, nrow = 2, ncol = 3);
m;
a <- array(data = 1:8, dim = c(2, 2, 2));
a;
l <- list(TRUE, 123L, 2.34, "abc");
l;
categories <- c("Male", "Female", "Male", "Male", "Male")
factor <- factor(categories);
factor;
categories <- c("Male", "Female", "Male", "Male", "Male");
factor;
levels(factor);
categories <- c("Male", "Female", "Male", "Male", "Female");
factor <- factor(categories);
factor;
unclass(factor);
df <- data.frame(                  Name = c("cat", "dog", "cow", "pig"),                  HowMany = c(5, 10, 15, 20),                  IsPet = c(TRUE, TRUE, FALSE, FALSE));
df;
df[1, 2];
df[, 2];
df[["HowMany"]];
df$HowMany;
df[c(2, 4),];
df[2:4,];
df[c(TRUE, TRUE, FALSE, FALSE),];
df[df$IsPet == TRUE,];
df[df$HowMany > 10,];
df[df$Name %in% c("cat", "cow"),];
1 + 2
c(1, 2, 3) + c(2, 4, 6);
m <- matrix(data = 1:6, nrow = 2, ncol = 3);
n <- matrix(1:6, 2, 3);
m = n;
identical(m, n);
m = n;
m == n;
? data.frame;
install.packages("dplyr");
install.packages("dplyr");
library("dplyr");
install.packages("dplyr");
library("dplyr");
cars <- read.table(                    file = "Cars.txt",                    header = TRUE,                    sep = "\t",        # t states for tab                    quote = "\"")
cars <- read.table(                    file = "Cars.txt",                    header = TRUE,                    sep = "\t",                            quote = "\"") 
cars <- read.table(                    file = "Cars.txt",                    header = TRUE,                    sep = "\t",                            quote = "\"") 
cars <- read.table(                    file = "Cars.txt",                    header = TRUE,                    sep = "\t",                            quote = "\"");
setwd ("E:/OneDrive/Проекты/IT_Step/VS_2017/DataScienceR/DataScienceR");
head(cars)
library(dplyr)
library(dplyr);
               Fuel.Economy);
temp <- select(                .data = cars,                Transmission,                Cylinders,                Fuel.Economy);
head(temp);
temp <- filter(                .data = temp,                Transmission == "Automatic");
head(temp);
temp <- mutate(                .data = temp,                Consumption = Fuel.Economy * 0.425);
head(temp);
temp <- group_by(                .data = temp,                Cylinders);
head(temp);
temp <- summarise(                .data = temp,                Avg.Consumption = mean(Consumption));
head(temp);
temp <- summarise(                .data = temp,                desc(Avg.Consumption));
temp <- arrange(                .data = temp,                desc(Avg.Consumption));
head(temp);
efficency <- as.data.frame(temp);
print(efficency);
efficency <- cars %>%     select(Fuel.Economy, Cylinders, Transmission) %>%     filter(Transmission == "Automatic") %>%     mutate(Consumtion = Fuel.Economy * 0.425) %>%     group_by(Cylinders) %>%     summarize(Avg.Consumption = mean(Consumtion)) %>%     arrange(desc(Avg.Consumption)) %>%     as.data.frame();
print(efficency);
write.csv(           x = efficency,           file = "Fuel Efficiency.csv",           row.names = FALSE);
cars <- read.csv("Cars.csv")
cars <- read.csv("Cars.csv")
cars <- read.csv("Cars.csv");
setwd("E:/OneDrive/Проекты/IT_Step/VS_2017/DataScienceR/DataScienceR");
cars <- read.csv("Cars.csv");
cars <- read.csv("Cars.csv");
head(cars)
table(cars$Transmission)
min(cars$Fuel.Economy)
max(cars$Fuel.Economy)
mean(cars$Fuel.Economy)
quantiles(cars$Fuel.Economy)
quantile(cars$Fuel.Economy)
sd(cars$Fuel.Economy)
sum(cars$Fuel.Economy)
cor(     x= cars$Cylinders,     y = cars$Fuel.Economy)
summary(cars)
barplot(         names = df$Name,         height = df$Value,         col = alpha("#FF681D", 0.5),         main = "Hello World",         xlab = "Name",         ylab= "Value")
cars<- read.csv("Cars.csv")
library (ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(        data = cars,     aes(x = Transmission)) +        geom_bar() +        ggtitle("Count of Cars by Transmission Type")         xlab("transmission Type") +         ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Transmission)) +        geom_bar() +        ggtitle("Count of Cars by Transmission Type")+         xlab("transmission Type") +         ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Transmission)) +        geom_bar() +        ggtitle("Count of Cars by Transmission Type")         xlab("transmission Type") +         ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Transmission)) +        geom_bar() +        ggtitle("Count of Cars by Transmission Type")+         xlab("transmission Type") +         ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Transmission)) +        geom_bar() +        ggtitle("Count of Cars by Transmission Type")+         xlab("transmission Type") +         ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Fuel.Economy)) +     geom_histogram(bins = 10) +     ggtitle("Distribution Fuel Economy") +     xlab("Fuel Economy(mpg)") +     ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Fuel.Economy)) +     geom_histogram(bins = 100) +     ggtitle("Distribution Fuel Economy") +     xlab("Fuel Economy(mpg)") +     ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Fuel.Economy)) +     geom_histogram(bins = 10) +     ggtitle("Distribution Fuel Economy") +     xlab("Fuel Economy(mpg)") +     ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Fuel.Economy)) +     geom_density() +     ggtitle("Distribution Fuel Economy") +     xlab("Fuel Economy(mpg)") +     ylab("Count of Cars")
ggplot(        data = cars,     aes(x = Cylinders,     y = Fuel.Economy)) +     geom_point() +     ggtitle("Fuel Economy by Cylinders") +     xlab("Number of Cylinders") +     ylab("FuelEconomy (mpg)")
data(iris)
head(iris)
plot( plot(      x = iris$Petal.Length,      y = iris$Petal.Width,      main = "Iris Peral Length vs. Width",      xlab = "Petal Length (cm)",      ylab = "Petal Width(cm)") plot(      x = iris$Petal.Length,      y = iris$Petal.Width,      main = "Iris Peral Length vs. Width",      xlab = "Petal Length (cm)",      ylab = "Petal Width(cm)")
plot(      x = iris$Petal.Length,      y = iris$Petal.Width,      main = "Iris Peral Length vs. Width",      xlab = "Petal Length (cm)",      ylab = "Petal Width(cm)");
plot(      x = iris$Petal.Length,      y = iris$Petal.Width,      main = "Iris Peral Length vs. Width",      xlab = "Petal Length (cm)",      ylab = "Petal Width(cm)")
plot(      x = iris$Petal.Length,      y = iris$Petal.Width,      main = "Iris Peral Length vs. Width",      xlab = "Petal Length (cm)",      ylab = "Petal Width(cm)")
model <- lm(             formula = Petal.Width ~ Petal.Length,             data = iris)
summary(model)
lines(       x = iris$Petal.Length,       y = model$fitted,       col = "red",       lwd = 3)
cor(     x = iris$Petal.Length,     y = iris$Petal.Width)
preidct(         object = model,         newdata = data.frame(         Petal.Length=c(2,5,7)))
#predict new values from the model preidict(         object = model,         newdata = data.frame(         Petal.Length=c(2,5,7)))
predict(         object = model,         newdata = data.frame(         Petal.Length=c(2,5,7)))
library (ff)
install.packages("ff")
library (ff)
irisff <- read.table.ffdf(                           file = "iris.csv",                           FUN = "read.csv")
irisff <- read.table.ffdf(                           file = "iris.csv",                           FUN = "read.csv")
class(irisff)
names(irisff)
irisff[1:5,]
install.packages("biglm")
librar(biglm)
library(biglm)
library(biglm)
model <- biglm(                formula = Petal.Width ~ Petal.Length,                data = irisff)
summary(model)
plot(      x = irisff$Petal.Length[],      y = irisff$Petal.Width[],      main = "Iris Petal Legth vs. Width",      xlab = "Petal Length(cm)",      ylab = "Petal Width(cm)")
b<-summary(model)$mat[1,1]
lines(       x = irisff$Petal.Length[],       y = m * irisff$Petal.Length[] + b,       col = "red",       lwd = 3)
m <- Summary(model)$mat[2, 1]
m <- summary(model)$mat[2, 1]
lines(       x = irisff$Petal.Length[],       y = m * irisff$Petal.Length[] + b,       col = "red",       lwd = 3)
predict(         object = model,         newdata = data.frame(         Petal.Length = c(2, 5, 7),         Petal.Width = c(0,0,0)))
